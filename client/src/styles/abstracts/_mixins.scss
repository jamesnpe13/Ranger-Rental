// ===========================================
// 1. Media Query Mixins
// ===========================================

/// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
@mixin respond-to($breakpoint) {
  @if $breakpoint == 'mobile' {
    @media (max-width: 767px) { @content; }
  } @else if $breakpoint == 'tablet' {
    @media (min-width: 768px) and (max-width: 1023px) { @content; }
  } @else if $breakpoint == 'desktop' {
    @media (min-width: 1024px) { @content; }
  } @else if $breakpoint == 'large-desktop' {
    @media (min-width: 1280px) { @content; }
  } @else if $breakpoint == 'xlarge-desktop' {
    @media (min-width: 1440px) { @content; }
  } @else {
    @warn "Breakpoint mixin supports: mobile, tablet, desktop, large-desktop, xlarge-desktop";
  }
}

/// Media of at most the maximum breakpoint width.
@mixin respond-to-down($breakpoint) {
  @if $breakpoint == 'mobile' {
    @media (max-width: 767px) { @content; }
  } @else if $breakpoint == 'tablet' {
    @media (max-width: 1023px) { @content; }
  } @else if $breakpoint == 'desktop' {
    @media (max-width: 1279px) { @content; }
  } @else if $breakpoint == 'large-desktop' {
    @media (max-width: 1439px) { @content; }
  } @else {
    @warn "Breakpoint mixin supports: mobile, tablet, desktop, large-desktop";
  }
}

/// Media that spans multiple breakpoint widths.
@mixin respond-to-between($lower, $upper) {
  @if $lower == 'mobile' and $upper == 'tablet' {
    @media (min-width: 0) and (max-width: 1023px) { @content; }
  } @else if $lower == 'mobile' and $upper == 'desktop' {
    @media (min-width: 0) and (max-width: 1279px) { @content; }
  } @else if $lower == 'tablet' and $upper == 'desktop' {
    @media (min-width: 768px) and (max-width: 1279px) { @content; }
  } @else {
    @warn "Please check your breakpoint values";
  }
}

// ===========================================
// 2. Typography Mixins
// ===========================================

/// Font size with responsive scaling
@mixin font-size($size, $line-height: null) {
  font-size: $size;
  font-size: calc(#{$size} * var(--text-scale-factor, 1));
  
  @if $line-height {
    line-height: $line-height;
  }
}

/// Text truncation with ellipsis
@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/// Multi-line text truncation
@mixin text-truncate-multiline($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

// ===========================================
// 3. Layout Mixins
// ===========================================

/// Clearfix hack
@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

/// Center block element
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/// Absolute center positioning
@mixin absolute-center($position: both) {
  position: absolute;
  
  @if $position == 'both' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $position == 'horizontal' {
    left: 50%;
    transform: translateX(-50%);
  } @else if $position == 'vertical' {
    top: 50%;
    transform: translateY(-50%);
  }
}

/// Flexbox mixins
@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between() {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-column() {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center() {
  @include flex-column();
  align-items: center;
  justify-content: center;
}

// ===========================================
// 4. Visual Effects Mixins
// ===========================================

/// Box shadow with multiple levels
@mixin box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  } @else if $level == 2 {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
  } @else if $level == 3 {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
  } @else if $level == 4 {
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  } @else if $level == 5 {
    box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
  }
}

/// Gradient text
@mixin text-gradient($start-color, $end-color, $direction: to right) {
  background: linear-gradient($direction, $start-color, $end-color);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
}

/// Smooth transition
@mixin transition($properties...) {
  $transition: ();
  
  @each $property in $properties {
    $transition: append($transition, $property 0.2s ease-in-out, $separator: comma);
  }
  
  transition: $transition;
}

/// Hover and focus states
@mixin hover-focus() {
  &:hover,
  &:focus {
    @content;
  }
}

// ===========================================
// 5. Form Element Mixins
// ===========================================

/// Form control focus state
@mixin form-control-focus() {
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }
}

/// Form validation state
@mixin form-validation-state($state, $color) {
  .form-control {
    border-color: $color;
    
    &:focus {
      border-color: $color;
      box-shadow: 0 0 0 0.2rem rgba($color, 0.25);
    }
  }
  
  .form-text {
    color: $color;
  }
}

/// Placeholder text
@mixin placeholder($color: $input-placeholder-color) {
  &::placeholder {
    color: $color;
    opacity: 1;
  }
  
  &:-ms-input-placeholder {
    color: $color;
  }
  
  &::-ms-input-placeholder {
    color: $color;
  }
}

// ===========================================
// 6. Button Variants
// ===========================================

@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  color: color-yiq($background);
  background-color: $background;
  border-color: $border;
  
  @include hover-focus() {
    color: color-yiq($hover-background);
    background-color: $hover-background;
    border-color: $hover-border;
  }
  
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;
    
    &:focus {
      box-shadow: 0 0 0 0.2rem rgba($background, 0.5);
    }
  }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
  color: $color;
  background-color: transparent;
  background-image: none;
  border-color: $color;
  
  @include hover-focus() {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }
  
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;
    
    &:focus {
      box-shadow: 0 0 0 0.2rem rgba($color, 0.5);
    }
  }
}

// ===========================================
// 7. Utility Mixins
// ===========================================

/// Screen reader only content
@mixin sr-only() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/// Screen reader only focusable content
@mixin sr-only-focusable() {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

/// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

/// Truncate text with an ellipsis
@mixin truncate($max-width: 100%) {
  max-width: $max-width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// ===========================================
// 8. Animation Mixins
// ===========================================

/// Keyframes with vendor prefixes
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

/// Animation with vendor prefixes
@mixin animation($str) {
  -webkit-animation: #{$str};
  animation: #{$str};
}

/// Fade in animation
@mixin fade-in($duration: 0.3s, $delay: 0s) {
  opacity: 0;
  animation: fadeIn $duration ease-in-out $delay forwards;
  
  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }
}

/// Slide in animation
@mixin slide-in($direction: 'up', $distance: 20px, $duration: 0.3s, $delay: 0s) {
  opacity: 0;
  transform: translateY(if($direction == 'up', $distance, if($direction == 'down', -$distance, 0)));
  animation: slideIn $duration ease-out $delay forwards;
  
  @keyframes slideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

// ===========================================
// 9. Helper Functions
// ===========================================

/// Calculate color contrast for accessibility
@function color-yiq($color, $dark: $gray-900, $light: $white) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);
  
  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  
  @if ($yiq >= 150) {
    @return $dark;
  } @else {
    @return $light;
  }
}

/// Convert pixels to rems
@function rem($pixels, $context: 16px) {
  @return ($pixels / $context) * 1rem;
}

/// Calculate ems from pixels
@function em($pixels, $context: 16px) {
  @return ($pixels / $context) * 1em;
}

// ===========================================
// 10. Grid System Mixins
// ===========================================

/// Creates a wrapper for a series of columns
@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
  margin-right: auto;
  margin-left: auto;
}

/// Make a grid column
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

/// Make a grid offset
@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

/// Generate responsive grid columns
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px;
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }
  
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
      
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }
      
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) {
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}

// ===========================================
// 11. Print Styles
// ===========================================

@mixin print-styles() {
  @media print {
    @content;
  }
}

// ===========================================
// 12. Dark Mode
// ===========================================

@mixin dark-mode() {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

// ===========================================
// 13. High Contrast Mode
// ===========================================

@mixin high-contrast-mode() {
  @media (prefers-contrast: high) {
    @content;
  }
}

// ===========================================
// 14. Reduced Motion
// ===========================================

@mixin reduced-motion() {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

// ===========================================
// 15. Print Styles
// ===========================================

@mixin print-styles() {
  @media print {
    @content;
  }
}